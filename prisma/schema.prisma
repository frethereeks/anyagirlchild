// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DoneStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum ContactStatus {
  READ
  UNREAD
  DELETED
}

enum ViewStatus {
  VISIBLE
  HIDDEN
}

enum Role {
  ROOT
  ADMIN
  USER
}

enum Status {
  PENDING
  ACTIVE
  SUSPENDED
}

model Blog {
  id        String     @id @default(cuid())
  title     String     @db.VarChar(150)
  slug      String     @db.VarChar(300)
  image     String?    @db.VarChar(200)
  text      String     @db.LongText()
  status    ViewStatus @default(VISIBLE)
  comments  Comment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  @@index([id])
}

model Comment {
  id        String   @id @default(cuid())
  fullname  String   @db.VarChar(50)
  email     String   @db.VarChar(100)
  text      String   @db.Text
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?

  @@index([id])
}

model Contact {
  id        String        @id @default(cuid())
  fullname  String        @db.VarChar(100)
  email     String        @db.VarChar(100)
  message   String        @db.VarChar(250)
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  updatedBy String        @default("null") @db.VarChar(50)

  @@index([id])
}

model Donation {
  id        String        @id @default(cuid())
  fullname  String        @db.VarChar(100)
  email     String        @unique @db.VarChar(100)
  currency  String        @db.VarChar(5)
  amount    Int           @default(0)
  message   String        @db.VarChar(160)
  status    DoneStatus    @default(PENDING)
  visiblity ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  updatedBy String        @default("null") @db.VarChar(50)

  @@index([id])
}

model Gallery {
  id        String     @id @default(cuid()) @db.VarChar(50)
  image     String     @db.VarChar(200)
  title     String     @db.VarChar(100)
  status    ViewStatus @default(VISIBLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  updatedBy String?    @default("null") @db.VarChar(50)
  User      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?    @db.VarChar(50)

  @@index([id])
}

model Logger {
  id        String        @id @default(cuid())
  message   String        @db.LongText()
  userId    String?       @db.VarChar(50)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    ContactStatus @default(UNREAD)

  @@index([id])
}

model Reply {
  id        String   @id @default(cuid())
  fullname  String   @db.VarChar(50)
  email     String   @db.VarChar(100)
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([id])
}

model User {
  id        String   @id @default(cuid())
  firstname String   @db.VarChar(50)
  lastname  String   @db.VarChar(50)
  image     String?  @db.VarChar(200)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  status    Status   @default(PENDING)
  role      Role     @default(USER)
  token     String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gallery Gallery[]
  blogs   Blog[]

  @@index([id])
}
